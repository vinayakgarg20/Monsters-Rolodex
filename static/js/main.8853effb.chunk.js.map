{"version":3,"sources":["component/card/card.jsx","component/card-list/card-list.jsx","component/search-box/search-box.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","src","random","alt","monster","name","email","CardList","monsters","map","Math","round","id","SearchBox","placeholder","handleChange","type","onChange","App","state","searchresult","fetch","then","re","json","u","setState","this","filteredmonsters","filter","toLowerCase","includes","e","target","value","console","log","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yUAGaA,EAAO,SAACC,GAAD,OAChB,sBAAKC,UAAU,iBAAf,UACI,qBAAKC,IAAG,+BAA0BF,EAAMG,OAAhC,0BAAgEC,IAAI,KAC5E,+BAAKJ,EAAMK,QAAQC,KAAnB,OACA,8BAAIN,EAAMK,QAAQE,MAAlB,WCFKC,EAAW,SAACR,GAAD,OACpB,qBAAKC,UAAU,YAAf,SACKD,EAAMS,SAASC,KAAI,SAAAL,GAAO,OACvB,cAAC,EAAD,CAAuBA,QAASA,EAASF,OAAQQ,KAAKC,MAAsB,IAAhBD,KAAKR,WAAtDE,EAAQQ,UCLlBC,G,MAAY,SAAC,GAAD,IAAGC,EAAH,EAAGA,YAAaC,EAAhB,EAAgBA,aAAhB,OACrB,uBAAOf,UAAU,SAASgB,KAAK,SAASF,YAAaA,EACjDG,SAAUF,MC0CHG,E,kDApCb,aAAe,IAAD,8BACZ,gBACKC,MAAQ,CACXX,SAAU,GACVY,aAAc,IAJJ,E,qDAOd,WAAoB,IAAD,OACjBC,MAAM,8CACLC,MAAK,SAAAC,GAAE,OAAIA,EAAGC,UACdF,MAAK,SAAAG,GAAC,OAAI,EAAKC,SAAS,CAAClB,SAAUiB,S,oBAGpC,WAAS,IAAD,SAC0BE,KAAKR,MAA9BX,EADD,EACCA,SAASY,EADV,EACUA,aACTQ,EAAmBpB,EAASqB,QAAO,SAAAzB,GAAO,OAAIA,EAAQC,KAAKyB,cAAcC,SAC7EX,EAAaU,kBAGhB,OACE,sBAAK9B,UAAU,MAAf,UACE,kDACJ,cAAC,EAAD,CAAWc,YAAY,iBAC7BC,aAAc,SAAAiB,GAAC,OAAI,EAAKN,SAAS,CAAEN,aAAcY,EAAEC,OAAOC,QAAS,kBAAMC,QAAQC,IAAI,EAAKjB,aAEhF,cAAC,EAAD,CAAUX,SAAYoB,W,GA3BdS,aCGHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBlB,MAAK,YAAkD,IAA/CmB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.8853effb.chunk.js","sourcesContent":["import React from 'react';\r\nimport './card.css';\r\n\r\nexport const Card = (props) => (\r\n    <div className='card-container'>\r\n        <img src={`https://robohash.org/${props.random}?set=set2&size=180x180`} alt=\"\" />\r\n        <h2>{props.monster.name} </h2>\r\n        <p>{props.monster.email} </p>\r\n    </div>\r\n);\r\n   ","import React from 'react';\r\nimport './card-list.css';\r\nimport {Card} from '../card/card.jsx';\r\n\r\n\r\nexport const CardList = (props) => \r\n    <div className='card-list'  >\r\n        {props.monsters.map(monster =>\r\n            <Card key={monster.id} monster={monster} random={Math.round(Math.random() * 1000) } />\r\n        \r\n\r\n    )}</div>\r\n","import React from 'react';\r\nimport './search-box.css';\r\n\r\nexport const SearchBox = ({ placeholder, handleChange}) =>\r\n    <input className='search' type='search' placeholder={placeholder}\r\n        onChange={handleChange} />\r\n","import React, {Component} from 'react';\n\nimport './App.css';\nimport './component/card-list/card-list.jsx';\nimport { CardList } from './component/card-list/card-list.jsx';\nimport { SearchBox} from './component/search-box/search-box.jsx';\n\n\n\nclass App extends Component{\n  \n  constructor() {\n    super();\n    this.state = {\n      monsters: [  ],\n      searchresult: ''\n    };\n  }\n  componentDidMount(){\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then(re => re.json())\n    .then(u => this.setState({monsters: u}))\n  }\n  \n    render(){\n      const {monsters,searchresult} = this.state;\n       const filteredmonsters = monsters.filter(monster => monster.name.toLowerCase().includes(\n         searchresult.toLowerCase())\n       );\n\n      return (\n        <div className=\"App\">\n          <h1>Monsters Rolodex</h1>\n      <SearchBox placeholder='Monster Search'\nhandleChange={e => this.setState({ searchresult: e.target.value }, () => console.log(this.state))} />\n          \n          <CardList monsters = {filteredmonsters} />\n\n          \n          \n          \n        </div>\n      );\n    }\n    \n\n}\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}